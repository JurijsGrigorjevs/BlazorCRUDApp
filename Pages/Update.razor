@page "/update/{id:int}"
@using BlazorCRUDApp.Data

<h1>Update post "@_postToUpdate?.Title"</h1>

@if (_isLoading)
{
    <p>Loading...</p>
}
else if (_postToUpdate == null)
{
    <p>Post not found.</p>
}
else
{
    <EditForm Model="_postToUpdate" OnValidSubmit="UpdatePost">
        <div class="form-group mb-3">
            <label for="postTitle">Title</label>
            <InputText @bind-Value="_postToUpdate.Title" class="form-control" id="postTitle" />
            <ValidationMessage For="@(() => _postToUpdate.Title)" />
        </div>

        <div class="form-group mb-3">
            <label for="postContent">Content</label>
            <InputText @bind-Value="_postToUpdate.Content" class="form-control" id="postContent" />
            <ValidationMessage For="@(() => _postToUpdate.Content)" />
        </div>

        <DataAnnotationsValidator />
        <ValidationSummary />

        <button class="btn btn-success" type="submit">Save</button>
        <button @onclick="@(() => NavigationManager.NavigateTo("/"))" class="btn btn-secondary">Cancel</button>
    </EditForm>
}

@code
{
    [Inject] AppDBContext AppDBContext { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }
    [Parameter] public int Id { get; set; }

    private Post _postToUpdate = null;
    private bool _isLoading = true;

    protected override async Task OnParametersSetAsync()
    {
        _postToUpdate = await AppDBContext.Posts.FindAsync(Id);
        _isLoading = false;
    }

    private async Task UpdatePost()
    {
        if (_postToUpdate != null)
        {
            AppDBContext.Posts.Update(_postToUpdate);
            await AppDBContext.SaveChangesAsync();
            NavigationManager.NavigateTo("/");
        }
    }
}